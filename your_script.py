# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v0ePe5m1VL3GhKuP0NUxzMxh8mIIdKqr
"""

pip install python-telegram-bot

import requests

# Your Bot Token from BotFather
TOKEN = '7689422169:AAFuE9v3SWy7Bq-lxXAdcAbpE1iW40pDOa8'

# Your Chat ID
CHAT_ID = '777990082'

# Function to send a message
def send_message(token, chat_id, message):
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {'chat_id': chat_id, 'text': message}
    response = requests.post(url, data=payload)
    if response.status_code == 200:
        print("Message sent successfully!")
    else:
        print(f"Failed to send message: {response.text}")

# Example usage
message = "abcdefgh"
send_message(TOKEN, CHAT_ID, message)

import yfinance as yf
import requests
import time


# Telegram Bot Notification Function
def send_telegram_notification(token, chat_id, message):
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {'chat_id': chat_id, 'text': message}
    response = requests.post(url, data=payload)
    if response.status_code == 200:
        print(f"Notification sent: {message}")
    else:
        print(f"Failed to send notification: {response.text}")


# Function to fetch stock data
def fetch_yahoo_stock_data(stock_symbol, period="1d"):
    try:
        stock = yf.Ticker(stock_symbol.upper() + ".NS")
        hist = stock.history(period=period)
        current_price = hist['Close'].iloc[-1] if not hist.empty else None
        return current_price, hist
    except Exception as e:
        print(f"Error fetching data for {stock_symbol}: {e}")
        return None, None


# Function to calculate breakout
def calculate_breakout(hist, current_price):
    resistance = hist['Close'].max()
    support = hist['Close'].min()
    breakout_type = None
    if current_price >= resistance:
        breakout_type = "Upward Breakout"
    elif current_price <= support:
        breakout_type = "Downward Breakout"
    return resistance, support, breakout_type


# Main Monitoring Function
def monitor_stocks(stock_symbols, token, chat_id, interval=60):
    notified_stocks = {symbol: None for symbol in stock_symbols}  # Tracks last breakout state

    # while True: # commented -> for single time use -> when button pressed
    for stock_symbol in stock_symbols:
        print(f"Checking {stock_symbol}...")
        current_price, hist = fetch_yahoo_stock_data(stock_symbol, period="1mo")

        if current_price is None or hist is None:
            continue

        resistance, support, breakout_type = calculate_breakout(hist, current_price)

        # Send notification only if there's a new breakout
        if breakout_type and notified_stocks[stock_symbol] != breakout_type:
            message = (f"Breakout Alert for {stock_symbol}!\n"
                       f"Current Price: {current_price}\n"
                       f"Resistance: {resistance}\n"
                       f"Support: {support}\n"
                       f"Type: {breakout_type}")
            send_telegram_notification(token, chat_id, message)
            notified_stocks[stock_symbol] = breakout_type  # Update last breakout state

        # print("Waiting for next check...") # commented (for single time use)
        # time.sleep(interval)  # Wait for the specified interval before checking again # commented (for single time use)


# Telegram Bot Credentials
TOKEN = '7689422169:AAFuE9v3SWy7Bq-lxXAdcAbpE1iW40pDOa8'
CHAT_ID = '777990082'

# Stocks to Monitor
STOCKS = ['TCS', 'RELIANCE', 'TATAPOWER' , 'IDEA' , 'YESBANK', 'IRFC' , 'ZOMATO', 'SUZLON', 'TATASTEEL' ,'MSTCLTD', 'TATAMOTORS', 'ONGC', 'PNB', 'LAURUSLABS', 'UPL', 'LTF', 'INFY', 'WIPRO', 'BAJAJFINSV', 'CIPLA', 'JSWSTEEL', 'HDFCBANK', 'TATACHEM', 'BPCL', 'SUNPHARMA', 'COROMANDEL', 'IGL', 'ICICIBANK', 'LT', 'M&M', 'OBEROIRLTY', 'SBIN', 'TATACONSUM', 'TVSMOTOR', 'PVRINOX', 'APOLLOHOSP', 'ASHOKLEY', 'AMBUJACEM', 'CONCOR', 'BIOCON' ]

# Monitoring Interval (in seconds, e.g., 60 seconds = 1 minute)
INTERVAL = 300  # You can increase the interval as needed (e.g., 3600 for 1 hour)

# Start Monitoring
monitor_stocks(STOCKS, TOKEN, CHAT_ID, INTERVAL)
